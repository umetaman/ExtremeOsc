"use strict";(self.webpackChunkdocuments=self.webpackChunkdocuments||[]).push([[628],{8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>o});var i=r(6540);const n={},s=i.createContext(n);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),i.createElement(s.Provider,{value:t},e.children)}},9133:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>f,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"read-write/write","title":"Write OSC","description":"If you want to write OSC to byte[] at any given time, use ExtremeOsc.OscWriter.","source":"@site/docs/read-write/write.md","sourceDirName":"read-write","slug":"/read-write/write","permalink":"/ExtremeOsc/docs/read-write/write","draft":false,"unlisted":false,"editUrl":"https://github.com/umetaman/ExtremeOsc/docs/read-write/write.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"title":"Write OSC","sidebar_position":0},"sidebar":"tutorialSidebar","previous":{"title":"Read OSC","permalink":"/ExtremeOsc/docs/read-write/read"},"next":{"title":"Roadmap","permalink":"/ExtremeOsc/docs/roadmap/"}}');var n=r(4848),s=r(8453);const a={title:"Write OSC",sidebar_position:0},o=void 0,f={},l=[{value:"OscWriter",id:"oscwriter",level:2}];function c(e){const t={code:"code",h2:"h2",hr:"hr",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["If you want to write OSC to ",(0,n.jsx)(t.code,{children:"byte[]"})," at any given time, use ",(0,n.jsx)(t.code,{children:"ExtremeOsc.OscWriter"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"Since it is implemented as a low-level API, it may be somewhat difficult to understand."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.p,{children:"For example, if you want to write the following OSC:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",metastring:'title="OSC"',children:'/example ,ifsT 12345 123.45f "Hello, World!"\n'})}),"\n",(0,n.jsxs)(t.p,{children:["You can use ",(0,n.jsx)(t.code,{children:"ExtremeOsc.OscWriter"})," to write values one by one."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",metastring:'title="Writing values one by one"',children:'int value0 = 12345;\r\nfloat value1 = 123.45f;\r\nstring value2 = "Hello, World!";\r\nbool value3 = false;\r\n\r\n// Byte array to send\r\nbyte[] buffer;\r\n\r\nint offset = 0;\r\nOscWriter.WriteString(buffer, "/example", ref offset);\r\n\r\n// address + \',\'\r\nint offsetTagTypes = offset + 1;\r\n// Tag type\r\nOscWriter.WriteString(buffer, ",ifsT");\r\n\r\nOscWriter.WriteInt32(buffer, value0, ref offset);\r\noffsetTagTypes++;\r\nOscWriter.WriteFloat(buffer, value1, ref offset);\r\noffsetTagTypes++;\r\nOscWriter.WriteStringUtf8(buffer, value2, ref offset);\r\noffsetTagTypes++;\r\nOscWriter.WriteBoolean(buffer, value3, offsetTagTypes);\r\noffsetTagTypes++;\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",metastring:'title="Writing as variable-length arguments"',children:'OscWriter.Write(buffer, "/example", value0, value1, value2, value3);\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",metastring:'title="No arguments"',children:'OscWriter.Write(buffer, "/example");\n'})}),"\n",(0,n.jsxs)(t.p,{children:["In most cases, these lines of code are unnecessary as ",(0,n.jsx)(t.code,{children:"[OscPackable]"})," can automatically generate them."]}),"\n",(0,n.jsx)(t.h2,{id:"oscwriter",children:"OscWriter"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:"public static void WriteString(byte[] buffer, string value, ref int offset);\r\npublic static void WriteString(byte[] buffer, byte[] value, ref int offset);\r\npublic static void WriteStringUtf8(byte[] buffer, string value, ref int offset);\r\npublic static void WriteInt32(byte[] buffer, int value, ref int offset);\r\npublic static void WriteInt64(byte[] buffer, long value, ref int offset);\r\npublic static void WriteFloat(byte[] buffer, float value, ref int offset);\r\npublic static void WriteBlob(byte[] buffer, byte[] value, ref int offset);\r\npublic static void WriteBlob(byte[] buffer, Span<byte> value, ref int offset);\r\npublic static void WriteULong(byte[] buffer, ulong value, ref int offset);\r\npublic static void WriteDouble(byte[] buffer, double value, ref int offset);\r\npublic static void WriteColor32(byte[] buffer, Color32 value, ref int offset);\r\npublic static void WriteChar(byte[] buffer, char value, ref int offset);\r\npublic static void WriteBoolean(byte[] buffer, bool value, int offset);\r\npublic static void WriteNil(byte[] buffer, int offset);\r\npublic static void WriteNil(byte[] buffer, Nil value, int offset);\r\npublic static void WriteInfinitum(byte[] buffer, int offset);\r\npublic static void WriteInfinitum(byte[] buffer, Infinitum value, int offset);\r\npublic static void WriteTimeTag(byte[] buffer, ulong value, ref int offset);\r\npublic static void WriteMidi(byte[] buffer, int value, ref int offset);\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}}}]);